package coco;

import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

public class coco {
	  public static double median(int[] a, int[] b) {
		    int m = a.length;
		    int n = b.length;
		    Arrays.sort(a);
		    Arrays.sort(b);
		    if (m == 0) {
		    	return n % 2 == 0 ? (double)(b[n/2] + b[n/2 + 1]) / 2 : (double)b[n/2];
		    }
		    if (n == 0) {
		    	return m % 2 == 0 ? (double)(a[m/2] + a[m/2 + 1]) / 2 : (double)a[m/2];
		    }
		    Queue<Integer> pq = new PriorityQueue<>();
		    for (int i = 0; i < m; i++) {
		    	pq.offer(a[i]);
		    }
		    for (int i = 0; i < n; i++) {
		    	pq.offer(b[i]);
		    }
		    int cur = 0;
		    int step = (m + n) / 2;
		    while (step > 0) {
		    	cur = pq.poll();
		    	step--;
		    }
		    return (m + n) % 2 != 0 ? (double)(cur + pq.poll()) / 2 : (double)pq.poll();
		  }
	  
	  public static void main(String[] args) {
		  int[] a = {3,2,4,1};
		  int[] b = {9,6,5,10,11};
		  double ans = median(a, b);
		  System.out.println(ans);
	  }
}
